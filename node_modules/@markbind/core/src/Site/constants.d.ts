export declare const INDEX_MARKDOWN_FILE = "index.md";
export declare const SITE_CONFIG_NAME = "site.json";
export declare const LAZY_LOADING_SITE_FILE_NAME = "LazyLiveReloadLoadingSite.html";
export declare const _: {
    difference: <T>(array: import("lodash").List<T> | null | undefined, ...values: import("lodash").List<T>[]) => T[];
    differenceWith: {
        <T1, T2>(array: import("lodash").List<T1> | null | undefined, values: import("lodash").List<T2>, comparator: import("lodash").Comparator2<T1, T2>): T1[];
        <T1_1, T2_1, T3>(array: import("lodash").List<T1_1> | null | undefined, values1: import("lodash").List<T2_1>, values2: import("lodash").List<T3>, comparator: import("lodash").Comparator2<T1_1, T2_1 | T3>): T1_1[];
        <T1_2, T2_2, T3_1, T4>(array: import("lodash").List<T1_2> | null | undefined, values1: import("lodash").List<T2_2>, values2: import("lodash").List<T3_1>, ...values: (import("lodash").List<T4> | import("lodash").Comparator2<T1_2, T2_2 | T3_1 | T4>)[]): T1_2[];
        <T_1>(array: import("lodash").List<T_1> | null | undefined, ...values: import("lodash").List<T_1>[]): T_1[];
    };
    flatMap: {
        <T_2>(collection: import("lodash").Dictionary<import("lodash").Many<T_2>> | import("lodash").NumericDictionary<import("lodash").Many<T_2>> | null | undefined): T_2[];
        (collection: object | null | undefined): any[];
        <T_3, TResult>(collection: import("lodash").List<T_3> | null | undefined, iteratee: import("lodash").ListIterator<T_3, import("lodash").Many<TResult>>): TResult[];
        <T_4 extends object, TResult_1>(collection: T_4 | null | undefined, iteratee: import("lodash").ObjectIterator<T_4, import("lodash").Many<TResult_1>>): TResult_1[];
        (collection: object | null | undefined, iteratee: string): any[];
        (collection: object | null | undefined, iteratee: object): boolean[];
    };
    has: <T_5>(object: T_5, path: import("lodash").PropertyPath) => boolean;
    isUndefined: (value: any) => value is undefined;
    isEqual: (value: any, other: any) => boolean;
    isEmpty: {
        <T_6 extends {
            __trapAny: any;
        }>(value?: T_6 | undefined): boolean;
        (value: string): value is "";
        (value: Map<any, any> | Set<any> | import("lodash").List<any> | null | undefined): boolean;
        (value: object): boolean;
        <T_7 extends object>(value: T_7 | null | undefined): value is import("lodash").EmptyObjectOf<T_7> | null | undefined;
        (value?: any): boolean;
    };
    isBoolean: (value?: any) => value is boolean;
    noop: (...args: any[]) => void;
    omitBy: {
        <T_8>(object: import("lodash").Dictionary<T_8> | null | undefined, predicate?: import("lodash").ValueKeyIteratee<T_8> | undefined): import("lodash").Dictionary<T_8>;
        <T_9>(object: import("lodash").NumericDictionary<T_9> | null | undefined, predicate?: import("lodash").ValueKeyIteratee<T_9> | undefined): import("lodash").NumericDictionary<T_9>;
        <T_10 extends object>(object: T_10 | null | undefined, predicate: import("lodash").ValueKeyIteratee<T_10[keyof T_10]>): Partial<T_10>;
    };
    startCase: (string?: string | undefined) => string;
    union: <T_11>(...arrays: (import("lodash").List<T_11> | null | undefined)[]) => T_11[];
    uniq: <T_12>(array: import("lodash").List<T_12> | null | undefined) => T_12[];
};
//# sourceMappingURL=constants.d.ts.map