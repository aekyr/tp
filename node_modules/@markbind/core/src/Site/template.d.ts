import { SiteConfig, SiteConfigPage } from './SiteConfig';
type NaviagablePage = {
    src: string;
    title?: string;
};
export declare class Template {
    rootPath: string;
    templatePath: string;
    siteConfig: SiteConfig;
    siteConfigPath: string;
    navigablePages: NaviagablePage[];
    constructor(rootPath: string, templatePath: string);
    validateTemplateFromPath(): boolean;
    generateSiteWithTemplate(): Promise<unknown>;
    /**
     * A method for initializing a markbind site according to the given template.
     * Generate the site.json and an index.md file.
     */
    init(): Promise<unknown>;
    /**
     * Converts an existing GitHub wiki or docs folder to a MarkBind website.
     */
    convert(): Promise<void>;
    getPageGlobPaths(page: SiteConfigPage, pagesExclude: string[]): string[];
    /**
     * Collects the paths to be traversed as navigable pages
     */
    collectNavigablePages(): void;
    /**
     * Copies over README.md or Home.md to default index.md if present.
     */
    addIndexPage(): Promise<void>;
    /**
     * Adds an about page to site if not present.
     */
    addAboutPage(): Promise<void>;
    /**
     * Adds a footer to default layout of site.
     */
    addDefaultLayoutFiles(): void;
    /**
     * Builds a site navigation file from the directory structure of the site.
     */
    buildSiteNav(): string;
    /**
     * Applies the default layout to all addressable pages by modifying the site config file.
     */
    addDefaultLayoutToSiteConfig(): Promise<void>;
    /**
     * Helper function for addDefaultLayoutToSiteConfig().
     */
    static writeToSiteConfig(config: SiteConfig, configPath: string): Promise<void>;
}
export {};
//# sourceMappingURL=template.d.ts.map