import type { NodeProcessorConfig } from './NodeProcessor';
import { MbNode } from '../utils/node';
export declare class SiteLinkManager {
    protected config: NodeProcessorConfig;
    protected intralinkCollection: Map<string, Set<string>>;
    protected filePathToHashesMap: Map<string, Set<string>>;
    constructor(config: NodeProcessorConfig);
    /**
     * Adds a resourcePath and cwf to the intralinkCollection,
     * ensuring each pair of (resourcePath, cwf) appears only once
     */
    _addToCollection(resourcePath: string, cwf: string): void;
    validateAllIntralinks(): void;
    /**
     * Add a link to the intralinkCollection to be validated later,
     * if the node should be validated and intralink validation is not disabled.
     */
    collectIntraLinkToValidate(node: MbNode, cwf: string): "Should not validate" | "Intralink validation disabled" | "Intralink collected to be validated later";
    /**
     * Add sections that could be reached by intra-link with hash to this node to filePathToHashesMap,
     * The reachable sections include nodes with ids and headings.
     */
    maintainFilePathToHashesMap(node: MbNode, cwf: string): void;
    /**
     * Recursively add reachable sections of the included node to the filePathToHashesMap for validation.
     */
    maintainHashesForInclude(node: MbNode, cwf: string): void;
}
//# sourceMappingURL=SiteLinkManager.d.ts.map