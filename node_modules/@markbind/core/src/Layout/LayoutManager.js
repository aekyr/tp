"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutManager = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const Layout_1 = require("./Layout");
const logger = __importStar(require("../utils/logger"));
const FRONTMATTER_NONE_ATTR = 'none';
class LayoutManager {
    constructor(config) {
        this.config = config;
        this.layoutsRootPath = path_1.default.join(config.rootPath, '_markbind', 'layouts');
        this.layouts = {};
    }
    /**
     * Flag all layouts for (re)generation when requested
     */
    removeLayouts() {
        this.layouts = {};
    }
    /**
     * Update layouts which have the provided filePaths as dependencies
     */
    updateLayouts(filePaths) {
        const layoutsToRegenerate = Object.entries(this.layouts)
            .filter(([, layout]) => layout.shouldRegenerate(filePaths));
        return Promise.all(layoutsToRegenerate.map(([name, layout]) => {
            this.layouts[name] = new Layout_1.Layout(layout.sourceFilePath, this.config);
            return this.layouts[name].generate();
        }));
    }
    generateLayoutIfNeeded(name) {
        if (this.layouts[name]) {
            return this.layouts[name].generatePromise;
        }
        const layoutPath = path_1.default.join(this.layoutsRootPath, name);
        if (!fs_extra_1.default.existsSync(layoutPath)) {
            logger.error(`'${name}' layout does not exist`);
            return Promise.resolve();
        }
        this.layouts[name] = new Layout_1.Layout(layoutPath, this.config);
        this.layouts[name].generatePromise = this.layouts[name].generate();
        return this.layouts[name].generatePromise;
    }
    layoutHasPageNav(name) {
        if (name === FRONTMATTER_NONE_ATTR) {
            return false;
        }
        return !!this.layouts[name] && !!this.layouts[name].layoutPageNavUuid;
    }
    combineLayoutWithPage(name, pageContent, pageNav, pageIncludedFiles) {
        if (name === FRONTMATTER_NONE_ATTR) {
            return pageContent;
        }
        if (!this.layouts[name]) {
            return pageContent;
        }
        return this.layouts[name].insertPage(pageContent, pageNav, pageIncludedFiles);
    }
    getLayoutPageNjkAssets(name) {
        if (name === FRONTMATTER_NONE_ATTR || !this.layouts[name]) {
            return {};
        }
        return this.layouts[name].getPageNjkAssets();
    }
}
exports.LayoutManager = LayoutManager;
//# sourceMappingURL=LayoutManager.js.map